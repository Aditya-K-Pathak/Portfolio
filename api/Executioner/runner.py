import subprocess
FILE_LOCATION = "api/Executioner/CacheFile/"

class Runner:
    """
    A class for running code files using subprocess.

    Attributes:
        FILE_LOCATION (str): The directory location for saving code files.
    """

    def run_python_code(input: str = "") -> str:
        """
        Executes a Python script located at a predefined file path and passes optional input to it.

        This function creates a subprocess to run a Python script using 'python3'. It allows for input to be
        passed to the script via stdin. The output or error generated by the script is captured and returned.

        Parameters:
        - input (str, optional): The input string to be passed to the Python script. Defaults to an empty string.

        Returns:
        - str: The output generated by the script if any, otherwise the error message.
        """
        process = subprocess.Popen(['python', FILE_LOCATION + 'temp.py'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        process.stdin.write(input)
        output, error = process.communicate()
        return output or error
    
    def run_java_code(input: str = "") -> str:
        """
        Executes a Java program located at a predefined file path and passes optional input to it.

        This function first compiles the Java program using 'javac'. It then creates a subprocess to run the compiled
        Java class using 'java'. It allows for input to be passed to the program via stdin. The output or error generated
        by the program is captured and returned.

        Parameters:
        - input (str, optional): The input string to be passed to the Java program. Defaults to an empty string.

        Returns:
        - str: The output generated by the program if any, otherwise the error message.
        """
        compilation = subprocess.run(['javac', FILE_LOCATION + 'temp.java'], capture_output = True, text = True)
        if compilation.returncode != 0:
            return compilation.stderr
        
        process = subprocess.Popen(['java', '-cp', FILE_LOCATION, 'temp'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)  # Runs the compiled Java class.
        process.stdin.write(input)  # Passes input to the Java program.
        output, error = process.communicate()  # Captures the output or error.
        return output or error  # Returns the output or error.

    def run_c_code(input: str = "") -> str:
        """
        Executes a C program located at a predefined file path and passes optional input to it.

        This function first compiles the C program using 'gcc'. It then creates a subprocess to run the compiled
        executable. It allows for input to be passed to the program via stdin. The output or error generated
        by the program is captured and returned.

        Parameters:
        - input (str, optional): The input string to be passed to the C program. Defaults to an empty string.

        Returns:
        - str: The output generated by the program if any, otherwise the error message.
        """
        compilation = subprocess.run(['gcc', FILE_LOCATION + 'temp.c', '-o', FILE_LOCATION + 'output'], capture_output = True, text = True)  # Compiles the C program.
        if compilation.returncode != 0:
            return compilation.stderr
        
        process = subprocess.Popen([FILE_LOCATION + 'output'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)  # Runs the compiled executable.
        process.stdin.write(input)  # Passes input to the C program.
        output, error = process.communicate()  # Captures the output or error.
        return output or error  # Returns the output or error.
    
    def run_cpp_code(input: str = "") -> str:
        """
        Executes a C++ program located at a predefined file path and passes optional input to it.

        This function first compiles the C++ program using 'g++'. It then creates a subprocess to run the compiled
        executable. It allows for input to be passed to the program via stdin. The output or error generated
        by the program is captured and returned.

        Parameters:
        - input (str, optional): The input string to be passed to the C++ program. Defaults to an empty string.

        Returns:
        - str: The output generated by the program if any, otherwise the error message.
        """
        compilation = subprocess.run(['g++', FILE_LOCATION + 'temp.c++', '-o', FILE_LOCATION + 'output'], capture_output = True, text = True)
        if compilation.returncode != 0:
            return compilation.stderr
        
        process = subprocess.Popen([FILE_LOCATION + 'output'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)  # Runs the compiled executable.
        process.stdin.write(input)  # Passes input to the C++ program.
        output, error = process.communicate()  # Captures the output or error.
        return output or error  # Returns the output or error.
