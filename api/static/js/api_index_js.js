const python = `<h3>Documentation: HTTP POST Request with requests.post()</h3>
                    <p>The <code>requests</code> module is used in Python for making HTTP requests to web servers. It provides an easy-to-use interface for sending various types of requests and handling responses.</p>
                    
                    <h4>HTTP POST Request with <code>requests.post()</code></h4>
                    <p>This code snippet demonstrates how to make an HTTP POST request to a specified URL using the <code>requests.post()</code> method.</p>
                    <pre class="highlight"><code>import requests

payload = {
    'lang': 'Python',
    'input': {YOUR INPUT/ STDIN},
    'code': {YOUR CODE}
}

response = requests.post('{SITE_URL}/api/editor/', json=payload)
print(response.json())</code></pre>
                    
                    <h3>Usage Example</h3>
                    <p>To use this code snippet, replace <code>{YOUR INPUT/ STDIN}</code> with the input data you want to provide to the code and <code>{YOUR CODE}</code> with the actual code you want to execute. Additionally, replace <code>{SITE_URL}</code> with this website URL.</p>
                    <pre class="highlight"><code>import requests

input_data = "5"
code = &quot;&quot;&quot;
def fibonacci(n):
    if n &lt;= 1:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)

n = int(input())
print(fibonacci(n))
&quot;&quot;&quot;
                
payload = {
    'lang': 'Python',
    'input': input_data,
    'code': code
}

response = requests.post('http://localhost:8000/api/editor/', json=payload)
print(response.json())</code></pre>
                    
<div class="response">
    <h4>Response</h4>
    <pre class="highlight">{<br>&nbsp;&nbsp;&quot;status&quot;: &quot;Success&quot;,<br>&nbsp;&nbsp;&quot;result&quot;: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&quot;ResponseTime&quot;: &quot;2024-04-13T21:02:11.675&quot;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&quot;Input&quot;: &quot;\ndef fibonacci(n):\n    if n &lt;= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = int(input())\nprint(fibonacci(n))\n&quot;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&quot;Response&quot;: &quot;5\n&quot;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&quot;Execution Time&quot;: 0.10428237915039062<br>&nbsp;&nbsp;}<br>}</pre>
    <h5>Attribute Details</h5>
    <ul>
        <li><strong>Status:</strong> Indicates the status of the API request. It has a string value "Success" representing a successful request.</li>
        <li><strong>Result:</strong> Contains detailed information about the API response.</li>
        <ul>
            <li><strong>ResponseTime:</strong> Represents the time when the response was generated or processed by the server. It follows the ISO 8601 format.</li>
            <li><strong>Input:</strong> Contains the input data provided to the API. In this case, it holds the Python code for calculating the Fibonacci sequence.</li>
            <li><strong>Response:</strong> Contains the output generated by the API in response to the provided input. Here, it holds the result of executing the Python code, which is the Fibonacci number.</li>
            <li><strong>Execution Time:</strong> Represents the duration of the API call, indicating the time taken to execute the Python code snippet.</li>
        </ul>
    </ul>
</div>
                    </pre>`;
const java = `<h3>Documentation: HTTP POST Request with HttpURLConnection</h3>
<p>Java provides the <code>HttpURLConnection</code> class for making HTTP requests to web servers. In this example, we demonstrate how to make an HTTP POST request using Java.</p>
                    
<h4>HTTP POST Request with <code>HttpURLConnection</code></h4>
<p>This code snippet demonstrates how to make an HTTP POST request to a specified URL using <code>HttpURLConnection</code> in Java.</p>
<pre class="highlight"><code>import java.net.*;
import java.io.*;
import com.google.gson.*;

public class APICallExample {
    public static void main(String[] args) throws Exception {
        // Define input data and code
        String input = "{Your Input}";
        String code = """
                      <code>{YOUR CODE}</code>
                      """;

        // Construct JSON payload
        JsonObject payload = new JsonObject();
        payload.addProperty("lang", "Java");
        payload.addProperty("input", input);
        payload.addProperty("code", code);

        // Send HTTP POST request
        String apiUrl = "http://localhost:8000/api/editor/";
        URL url = new URL(apiUrl);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("POST");
        con.setRequestProperty("Content-Type", "application/json");
        con.setDoOutput(true);
        
        // Write payload to request body
        try(OutputStream os = con.getOutputStream()) {
            byte[] inputBytes = payload.toString().getBytes("utf-8");
            os.write(inputBytes, 0, inputBytes.length);
        }

        // Read response
        try(BufferedReader br = new BufferedReader(
            new InputStreamReader(con.getInputStream(), "utf-8"))) {
            StringBuilder response = new StringBuilder();
            String responseLine = null;
            while ((responseLine = br.readLine()) != null) {
                response.append(responseLine.trim());
            }
            System.out.println(response.toString());
        }
    }
}</code></pre>
                    
<h3>Usage Example</h3>
<p>To use this code snippet, replace <code>input</code> with the input data you want to provide to the code and <code>code</code> with the actual code you want to execute. Additionally, replace <code>{SITE_URL}</code> with the appropriate website URL.</p>
<pre class="highlight"><code>import java.net.*;
import java.io.*;
import com.google.gson.*;

public class APICallExample {
    public static void main(String[] args) throws Exception {
        // Define input data and code
        String input = "5";
        String code = """
                      public class Main {
                          static int fibonacci(int n) {
                              if (n <= 1) return n;
                              return fibonacci(n - 1) + fibonacci(n - 2);
                          }

                          public static void main(String[] args) {
                              int n = Integer.parseInt(args[0]);
                              System.out.println(fibonacci(n));
                          }
                      }
                      """;

        // Construct JSON payload
        JsonObject payload = new JsonObject();
        payload.addProperty("lang", "Java");
        payload.addProperty("input", input);
        payload.addProperty("code", code);

        // Send HTTP POST request
        String apiUrl = "http://localhost:8000/api/editor/";
        URL url = new URL(apiUrl);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("POST");
        con.setRequestProperty("Content-Type", "application/json");
        con.setDoOutput(true);
        
        // Write payload to request body
        try(OutputStream os = con.getOutputStream()) {
            byte[] inputBytes = payload.toString().getBytes("utf-8");
            os.write(inputBytes, 0, inputBytes.length);
        }

        // Read response
        try(BufferedReader br = new BufferedReader(
            new InputStreamReader(con.getInputStream(), "utf-8"))) {
            StringBuilder response = new StringBuilder();
            String responseLine = null;
            while ((responseLine = br.readLine()) != null) {
                response.append(responseLine.trim());
            }
            System.out.println(response.toString());
        }
    }
}</code></pre>
                    
<div class="response">
    <h4>Response</h4>
    <pre class="highlight">{<br>&nbsp;&nbsp;&quot;status&quot;: &quot;Success&quot;,<br>&nbsp;&nbsp;&quot;result&quot;: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&quot;ResponseTime&quot;: &quot;2024-04-13T21:02:11.675&quot;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&quot;Input&quot;: &quot;\ndef fibonacci(n):\n    if n &lt;= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = int(input())\nprint(fibonacci(n))\n&quot;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&quot;Response&quot;: &quot;5\n&quot;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&quot;Execution Time&quot;: 0.10428237915039062<br>&nbsp;&nbsp;}<br>}</pre>
    <h5>Attribute Details</h5>
    <ul>
        <li><strong>Status:</strong> Indicates the status of the API request. It has a string value "Success" representing a successful request.</li>
        <li><strong>Result:</strong> Contains detailed information about the API response.</li>
        <ul>
            <li><strong>ResponseTime:</strong> Represents the time when the response was generated or processed by the server. It follows the ISO 8601 format.</li>
            <li><strong>Input:</strong> Contains the input data provided to the API. In this case, it holds the Java code for calculating the Fibonacci sequence.</li>
            <li><strong>Response:</strong> Contains the output generated by the API in response to the provided input. Here, it holds the result of executing the Java code, which is the Fibonacci number.</li>
            <li><strong>Execution Time:</strong> Represents the duration of the API call, indicating the time taken to execute the Java code snippet.</li>
        </ul>
    </ul>
</div>
`;
const js = `<h3>Documentation: HTTP POST Request with Fetch API (JavaScript)</h3>
<p>The Fetch API provides a modern interface for fetching resources (including across the network). It is available in most modern browsers and can be used to make HTTP requests to web servers.</p>
                    
<h4>HTTP POST Request with Fetch API</h4>
<p>This code snippet demonstrates how to make an HTTP POST request to a specified URL using the Fetch API in JavaScript.</p>
<pre class="highlight"><code>const apiUrl = 'http://localhost:8000/api/editor/';
const payload = {
    lang: 'JavaScript',
    input: '{YOUR INPUT HERE}',
    code: 
        "{YOUR CODE HERE}";

fetch(apiUrl, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify(payload)
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error('Error:', error));</code></pre>
                    
<h3>Usage Example</h3>
<p>To use this code snippet, replace <code>payload.input</code> with the input data you want to provide to the code and <code>payload.code</code> with the actual code you want to execute.</p>
<pre class="highlight"><code>const apiUrl = 'http://localhost:8000/api/editor/';
const input = '5';
const code = 
    function fibonacci(n) {
        if (n <= 1) return n;
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
    console.log(fibonacci({input}));
;

const payload = {
    lang: 'JavaScript',
    input: input,
    code: code
};

fetch(apiUrl, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify(payload)
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error('Error:', error));</code></pre>
                    
<div class="response">
    <h4>Response</h4>
    <pre class="highlight">{<br>&nbsp;&nbsp;"status": "Success",<br>&nbsp;&nbsp;"result": {<br>&nbsp;&nbsp;&nbsp;&nbsp;"ResponseTime": "2024-04-13T21:02:11.675",<br>&nbsp;&nbsp;&nbsp;&nbsp;"Input": "\nfunction fibonacci(n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\nconsole.log(fibonacci(5));\n",<br>&nbsp;&nbsp;&nbsp;&nbsp;"Response": "5\n",<br>&nbsp;&nbsp;&nbsp;&nbsp;"Execution Time": 0.10428237915039062<br>&nbsp;&nbsp;}<br>}</pre>
    <h5>Attribute Details</h5>
    <ul>
        <li><strong>Status:</strong> Indicates the status of the API request. It has a string value "Success" representing a successful request.</li>
        <li><strong>Result:</strong> Contains detailed information about the API response.</li>
        <ul>
            <li><strong>ResponseTime:</strong> Represents the time when the response was generated or processed by the server. It follows the ISO 8601 format.</li>
            <li><strong>Input:</strong> Contains the input data provided to the API. In this case, it holds the JavaScript code for calculating the Fibonacci sequence.</li>
            <li><strong>Response:</strong> Contains the output generated by the API in response to the provided input. Here, it holds the result of executing the JavaScript code, which is the Fibonacci number.</li>
            <li><strong>Execution Time:</strong> Represents the duration of the API call, indicating the time taken to execute the JavaScript code snippet.</li>
        </ul>
    </ul>
</div>`;
const go = `<h3>Documentation: HTTP POST Request with Go (Golang)</h3>
<p>Go (Golang) provides a standard library package <code>net/http</code> that can be used to make HTTP requests to web servers. It offers a straightforward way to perform various types of HTTP operations.</p>
                    
<h4>HTTP POST Request with Go</h4>
<p>This code snippet demonstrates how to make an HTTP POST request to a specified URL using the <code>net/http</code> package in Go.</p>
<pre class="highlight"><code>package main

import (
    "bytes"
    "encoding/json"
    "fmt"
    "net/http"
)

func main() {
    apiUrl := "http://localhost:8000/api/editor/"
    payload := map[string]interface{}{
        "lang":  "Go",
        "input": "YOUE INPUT HERE",
        "code": 
            "YOUR CODE HERE"
        ,
    }

    jsonData, err := json.Marshal(payload)
    if err != nil {
        fmt.Println("Error:", err)
        return
    }

    resp, err := http.Post(apiUrl, "application/json", bytes.NewBuffer(jsonData))
    if err != nil {
        fmt.Println("Error:", err)
        return
    }
    defer resp.Body.Close()

    var result map[string]interface{}
    json.NewDecoder(resp.Body).Decode(&result)
    fmt.Println(result)
}</code></pre>
                    
<h3>Usage Example</h3>
<p>To use this code snippet, replace the <code>input</code> field in the <code>payload</code> variable with the input data you want to provide to the code and update the <code>code</code> field with the actual Go code you want to execute.</p>
<pre class="highlight"><code>package main

import (
    "bytes"
    "encoding/json"
    "fmt"
    "net/http"
)

func main() {
    apiUrl := "http://localhost:8000/api/editor/"
    input := "5"
    code := 
        package main
        
        import "fmt"
        
        func fibonacci(n int) int {
            if n <= 1 {
                return n
            }
            return fibonacci(n-1) + fibonacci(n-2)
        }
        
        func main() {
            fmt.Println(fibonacci(5))
        }
    

    payload := map[string]interface{}{
        "lang":  "Go",
        "input": input,
        "code":  code,
    }

    jsonData, err := json.Marshal(payload)
    if err != nil {
        fmt.Println("Error:", err)
        return
    }

    resp, err := http.Post(apiUrl, "application/json", bytes.NewBuffer(jsonData))
    if err != nil {
        fmt.Println("Error:", err)
        return
    }
    defer resp.Body.Close()

    var result map[string]interface{}
    json.NewDecoder(resp.Body).Decode(&result)
    fmt.Println(result)
}</code></pre>
                    
<div class="response">
    <h4>Response</h4>
    <pre class="highlight">{<br>&nbsp;&nbsp;"status": "Success",<br>&nbsp;&nbsp;"result": {<br>&nbsp;&nbsp;&nbsp;&nbsp;"ResponseTime": "2024-04-13T21:02:11.675",<br>&nbsp;&nbsp;&nbsp;&nbsp;"Input": "\npackage main\n\nimport \"fmt\"\n\nfunc fibonacci(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return fibonacci(n-1) + fibonacci(n-2)\n}\n\nfunc main() {\n    fmt.Println(fibonacci(5))\n}\n",<br>&nbsp;&nbsp;&nbsp;&nbsp;"Response": "5\n",<br>&nbsp;&nbsp;&nbsp;&nbsp;"Execution Time": 0.10428237915039062<br>&nbsp;&nbsp;}<br>}</pre>
    <h5>Attribute Details</h5>
    <ul>
        <li><strong>Status:</strong> Indicates the status of the API request. It has a string value "Success" representing a successful request.</li>
        <li><strong>Result:</strong> Contains detailed information about the API response.</li>
        <ul>
            <li><strong>ResponseTime:</strong> Represents the time when the response was generated or processed by the server. It follows the ISO 8601 format.</li>
            <li><strong>Input:</strong> Contains the input data provided to the API. In this case, it holds the Go code for calculating the Fibonacci sequence.</li>
            <li><strong>Response:</strong> Contains the output generated by the API in response to the provided input. Here, it holds the result of executing the Go code, which is the Fibonacci number.</li>
            <li><strong>Execution Time:</strong> Represents the duration of the API call, indicating the time taken to execute the Go code snippet.</li>
        </ul>
    </ul>
</div>
`;
const cpp = `<h3>Documentation: HTTP POST Request with C++</h3>
<p>In C++, you can use libraries like cURL or <code>libcurl</code> to make HTTP requests to web servers. Alternatively, you can implement the functionality using the standard library <code>iostream</code> along with <code>libcurl</code> for more advanced features.</p>
                    
<h4>HTTP POST Request with C++</h4>
<p>This code snippet demonstrates how to make an HTTP POST request to a specified URL using the <code>libcurl</code> library in C++.</p>
<pre class="highlight"><code>#include &lt;iostream&gt;
#include &lt;curl/curl.h&gt;

int main() {
    CURL *curl;
    CURLcode res;
    
    curl = curl_easy_init();
    if (curl) {
        std::string url = "http://localhost:8000/api/editor/";
        std::string input = "{YOUR INPUPT HERE}";
        std::string code = R"({YOUR CODE HERE}";

        std::string payload = "{\\\"lang\\\": \\\"C++\\\", \\\"input\\\": \\\"" + input + "\\\", \\\"code\\\": \\\"" + code + "\\\"}";
        
        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, payload.c_str());
        
        res = curl_easy_perform(curl);
        if (res != CURLE_OK) {
            std::cerr &lt;&lt; "curl_easy_perform() failed: " &lt;&lt; curl_easy_strerror(res) &lt;&lt; std::endl;
        }
        
        curl_easy_cleanup(curl);
    }
    
    return 0;
}</code></pre>
                    
<h3>Usage Example</h3>
<p>To use this code snippet, replace the <code>input</code> variable with the input data you want to provide to the code and update the <code>code</code> variable with the actual C++ code you want to execute.</p>
<pre class="highlight"><code>#include &lt;iostream&gt;
#include &lt;curl/curl.h&gt;

int main() {
    CURL *curl;
    CURLcode res;
    
    curl = curl_easy_init();
    if (curl) {
        std::string url = "http://localhost:8000/api/editor/";
        std::string input = "5";
        std::string code = R"(
            #include &lt;iostream&gt;
            
            int fibonacci(int n) {
                if (n &lt;= 1) {
                    return n;
                }
                return fibonacci(n - 1) + fibonacci(n - 2);
            }
            
            int main() {
                std::cout &lt;&lt; fibonacci(5) &lt;&lt; std::endl;
                return 0;
            }
        )";

        std::string payload = "{\\\"lang\\\": \\\"C++\\\", \\\"input\\\": \\\"" + input + "\\\", \\\"code\\\": \\\"" + code + "\\\"}";
        
        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, payload.c_str());
        
        res = curl_easy_perform(curl);
        if (res != CURLE_OK) {
            std::cerr &lt;&lt; "curl_easy_perform() failed: " &lt;&lt; curl_easy_strerror(res) &lt;&lt; std::endl;
        }
        
        curl_easy_cleanup(curl);
    }
    
    return 0;
}</code></pre>
                    
<div class="response">
    <h4>Response</h4>
    <pre class="highlight">{<br>&nbsp;&nbsp;"status": "Success",<br>&nbsp;&nbsp;"result": {<br>&nbsp;&nbsp;&nbsp;&nbsp;"ResponseTime": "2024-04-13T21:02:11.675",<br>&nbsp;&nbsp;&nbsp;&nbsp;"Input": "\n#include &lt;iostream&gt;\n\nint fibonacci(int n) {\n    if (n &lt;= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    std::cout &lt;&lt; fibonacci(5) &lt;&lt; std::endl;\n    return 0;\n}\n",<br>&nbsp;&nbsp;&nbsp;&nbsp;"Response
`;
const csharp = `<h3>Documentation: HTTP POST Request with C#</h3>
<p>In C#, you can use the <code>HttpClient</code> class from the <code>System.Net.Http</code> namespace to make HTTP requests to web servers. It provides a simple and flexible way to send HTTP requests and handle responses.</p>
                    
<h4>HTTP POST Request with <code>HttpClient</code></h4>
<p>This code snippet demonstrates how to make an HTTP POST request to a specified URL using the <code>HttpClient</code> class in C#.</p>
<pre class="highlight"><code>using System;
using System.Net.Http;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        using HttpClient client = new HttpClient();
        
        var url = "http://localhost:8000/api/editor/";
        var input = "{YOUR INPUT/ STDIN HERE}";
        var code = @"{YOUR CODE HERE}";

        var payload = "{\"lang\": \"C#\", \"input\": \"" + input + "\", \"code\": \"" + code + "\"}";

        var content = new StringContent(payload, System.Text.Encoding.UTF8, "application/json");

        var response = await client.PostAsync(url, content);

        var result = await response.Content.ReadAsStringAsync();

        Console.WriteLine(result);
    }
}
</code></pre>
                    
<h3>Usage Example</h3>
<p>To use this code snippet, replace the <code>input</code> variable with the input data you want to provide to the code and update the <code>code</code> variable with the actual C# code you want to execute.</p>
<pre class="highlight"><code>using System;
using System.Net.Http;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        using HttpClient client = new HttpClient();
        
        var url = "http://localhost:8000/api/editor/";
        var input = "5";
        var code = @"
using System;

class Program
{
    static void Main(string[] args)
    {
        int Fibonacci(int n)
        {
            return n &lt;= 1 ? n : Fibonacci(n - 1) + Fibonacci(n - 2);
        }

        Console.WriteLine(Fibonacci(5));
    }
}";

        var payload = "{\"lang\": \"C#\", \"input\": \"" + input + "\", \"code\": \"" + code + "\"}";

        var content = new StringContent(payload, System.Text.Encoding.UTF8, "application/json");

        var response = await client.PostAsync(url, content);

        var result = await response.Content.ReadAsStringAsync();

        Console.WriteLine(result);
    }
}
</code></pre>
                    
<div class="response">
    <h4>Response</h4>
    <pre class="highlight">{<br>&nbsp;&nbsp;"status": "Success",<br>&nbsp;&nbsp;"result": {<br>&nbsp;&nbsp;&nbsp;&nbsp;"ResponseTime": "2024-04-13T21:02:11.675",<br>&nbsp;&nbsp;&nbsp;&nbsp;"Input": "\nusing System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        int Fibonacci(int n)\n        {\n            return n &lt;= 1 ? n : Fibonacci(n - 1) + Fibonacci(n - 2);\n        }\n\n        Console.WriteLine(Fibonacci(5));\n    }\n}\n",<br>&nbsp;&nbsp;&nbsp;&nbsp;"Response": "5\n",<br>&nbsp;&nbsp;&nbsp;&nbsp;"Execution Time": 0.10428237915039062<br>&nbsp;&nbsp;}<br>}</pre>
    <h5>Attribute Details</h5>
    <ul>
        <li><strong>Status:</strong> Indicates the status of the API request. It has a string value "Success" representing a successful request.</li>
        <li><strong>Result:</strong> Contains detailed information about the API response.</li>
        <ul>
            <li><strong>ResponseTime:</strong> Represents the time when the response was generated or processed by the server. It follows the ISO 8601 format.</li>
            <li><strong>Input:</strong> Contains the input data provided to the API. In this case, it holds the C# code for calculating the Fibonacci sequence.</li>
            <li><strong>Response:</strong> Contains the output generated by the API in response to the provided input. Here, it holds the result of executing the C# code, which is the Fibonacci number.</li>
            <li><strong>Execution Time:</strong> Represents the duration of the API call, indicating the time taken to execute the C# code snippet.</li>
        </ul>
    </ul>
</div>
`;

const replace_language = (lang) => {
  const codecard = document.getElementsByClassName("code-card")[0];
  const langname = document.getElementsByClassName("language-name");
  for (let i = 0; i < langname.length; i++) {
    langname[i].style.color = "white";
    langname[i].style.backgroundColor = "transparent";
  }
  lang.style.color = "black";
  lang.style.backgroundColor = "rgb(218, 218, 218)";
  if (lang.innerText == "Python") {
    codecard.innerHTML = python;
  } else if (lang.innerText == "Java") {
    codecard.innerHTML = java;
  } else if (lang.innerText == "JavaScript") {
    codecard.innerHTML = js;
  } else if (lang.innerText == "Go") {
    codecard.innerHTML = go;
  } else if (lang.innerText == "C++") {
    codecard.innerHTML = cpp;
  } else if (lang.innerText == "C#") {
    codecard.innerHTML = csharp;
  }
};
document.getElementsByClassName("language-name")[0].click();
